generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================== Models =====================
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())

  memberships Member[]
  directMessages DirectMessage[]
  conversationsInitiated Conversation[] @relation("UserOne")
  conversationsReceived  Conversation[] @relation("UserTwo")
}

model Server {
  id          String    @id @default(uuid())
  name        String
  image       String
  inviteCode  String    @unique @default(uuid())
  createdAt   DateTime  @default(now())

  channels    Channel[]
  members     Member[]
}

model Member {
  id       String     @id @default(uuid())
  userId   String
  serverId String
  role     MemberRole @default(USER)

  user      User      @relation(fields: [userId], references: [id])
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages  Message[]
}

model Channel {
  id          String   @id @default(uuid())
  name        String
  serverId    String
  createdAt   DateTime @default(now())
  channelType ChannelType @default(TEXT)

  server   Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id          String    @id @default(uuid())
  content     String
  memberId    String
  channelId   String
  createdAt   DateTime  @default(now())

  member  Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted Boolean     @default(false) // Soft delete

  @@index([channelId])
  @@index([memberId])
}

// ====================== Direct Messages =====================
model Conversation {
  id          String    @id @default(uuid())
  userOneId   String
  userTwoId   String

  userOne     User @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo     User @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)

  messages DirectMessage[]

  @@index([userOneId])
  @@index([userTwoId])
  @@unique([userOneId, userTwoId])
}

model DirectMessage {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now())
  deleted         Boolean   @default(false)

  userId          String
  conversationId  String

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([conversationId])
}

// =============================================================

// ====================== Enums =====================
enum MemberRole {
  ADMIN
  MODERATOR
  USER
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}
